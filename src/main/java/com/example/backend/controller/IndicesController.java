package com.example.backend.controller;

import java.time.LocalDate;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.backend.entiity.PolygonArea;
import com.example.backend.service.PolygonAreaService;
import com.example.backend.service.SentinelHubService;

@RestController
@RequestMapping("/api/v1/indices")
public class IndicesController {

    private final PolygonAreaService polygonAreaService;
    private final SentinelHubService sentinelHubService;

    public IndicesController(PolygonAreaService polygonAreaService, SentinelHubService sentinelHubService) {
        this.polygonAreaService = polygonAreaService;
        this.sentinelHubService = sentinelHubService;
    }

    @GetMapping("/ndvi/{polygonId}")
    public ResponseEntity<?> getNdvIForPolygon(@PathVariable String polygonId) {
        UUID uuid;
        try {
            uuid = UUID.fromString(polygonId);
        } catch (IllegalArgumentException e) {
            return ResponseEntity.status(400).body(Map.of("message", "Invalid polygon ID format. Must be a valid UUID."));
        }

        Optional<PolygonArea> optionalPolygon;
        try {
            optionalPolygon = polygonAreaService.getPolygonByIdForCurrentUser(uuid);
        } catch (SecurityException e) {
            return ResponseEntity.status(403).body(Map.of("message", "Access denied. " + e.getMessage()));
        } catch (IllegalArgumentException e) {
            return ResponseEntity.status(404).body(Map.of("message", e.getMessage()));
        }

        if (optionalPolygon.isEmpty()) {
            return ResponseEntity.status(404).body(Map.of("message", "Polygon not found with ID: " + polygonId));
        }

        PolygonArea polygon = optionalPolygon.get();
        String geoJsonString = polygon.getGeoJson();

        if (geoJsonString == null || geoJsonString.isEmpty()) {
            return ResponseEntity.status(400).body(Map.of("message", "Polygon GeoJSON data is missing for ID: " + polygonId));
        }

        try {
            LocalDate toDate = LocalDate.now();
            LocalDate fromDate = toDate.minusDays(30);

            Double ndviMean = sentinelHubService.getNdvIStatistics(geoJsonString, fromDate, toDate);

            String interpretation;
            if (ndviMean == null) {
                interpretation = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ NDVI. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
            } else if (ndviMean > 0.4) {
                interpretation = "–ù–∞ —ç—Ç–æ–º —É—á–∞—Å—Ç–∫–µ NDVI (Normalized Difference Vegetation Index) —Ä–∞–≤–µ–Ω " + String.format("%.3f", ndviMean) + ", —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ö–æ—Ä–æ—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. üåø";
            } else if (ndviMean > 0.2) {
                interpretation = "–ù–∞ —ç—Ç–æ–º —É—á–∞—Å—Ç–∫–µ NDVI (Normalized Difference Vegetation Index) —Ä–∞–≤–µ–Ω " + String.format("%.3f", ndviMean) + ", —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ–± —É–º–µ—Ä–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. üåæ";
            } else if (ndviMean >= 0) {
                interpretation = "–ù–∞ —ç—Ç–æ–º —É—á–∞—Å—Ç–∫–µ NDVI (Normalized Difference Vegetation Index) —Ä–∞–≤–µ–Ω " + String.format("%.3f", ndviMean) + ", —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–∫—É–¥–Ω—É—é —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –µ—ë –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ. üçÇ";
            } else {
                interpretation = "–ù–∞ —ç—Ç–æ–º —É—á–∞—Å—Ç–∫–µ NDVI (Normalized Difference Vegetation Index) —Ä–∞–≤–µ–Ω " + String.format("%.3f", ndviMean) + ", —á—Ç–æ, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤–æ–¥—É, —Å–Ω–µ–≥, –æ–±–ª–∞–∫–∞ –∏–ª–∏ –Ω–µ—Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã. üíß";
            }

            return ResponseEntity.ok(Map.of("ndviValue", ndviMean, "interpretation", interpretation));

        } catch (Exception e) {
            System.err.println("Error fetching NDVI for polygon ID " + polygonId + ": " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(500).body(Map.of("message", "Failed to retrieve NDVI data: " + e.getMessage()));
        }
    }

    // –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è NDVI –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    // –§—Ä–æ–Ω—Ç–µ–Ω–¥ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—é–¥–∞ POST-–∑–∞–ø—Ä–æ—Å —Å { lat, lon }
    @PostMapping("/ndvi")
    public ResponseEntity<?> getNdvIForCoordinates(@RequestBody Map<String, Double> coords) {
        Double lat = coords.get("lat");
        Double lon = coords.get("lon");

        if (lat == null || lon == null) {
            return ResponseEntity.status(400).body(Map.of("error", "Latitude and Longitude are required."));
        }

        try {
            // --- –í–†–ï–ú–ï–ù–ù–´–ô –ú–û–ö –î–õ–Ø –û–ë–•–û–î–ê –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô SENTINEL HUB ---
            // –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –∏ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –±–ª–æ–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ Sentinel Hub –Ω–∏–∂–µ,
            // —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ NDVI.
            return ResponseEntity.ok(Map.of("ndvi", (Math.random() * 2 - 1))); // <-- –≠–¢–ê –°–¢–†–û–ö–ê –¢–ï–ü–ï–†–¨ –ê–ö–¢–ò–í–ù–ê!
            // --- –ö–û–ù–ï–¶ –í–†–ï–ú–ï–ù–ù–û–ì–û –ú–û–ö–ê ---

            /*
            // --- –†–ï–ê–õ–¨–ù–´–ô –ó–ê–ü–†–û–° –ö SENTINEL HUB ---
            // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–æ–∫—É –º–æ–∫–∞ –≤—ã—à–µ –∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –±–ª–æ–∫,
            // –∫–æ–≥–¥–∞ –≤—ã —Ä–µ—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å –ª–∏–º–∏—Ç–∞–º–∏ Sentinel Hub –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é –¥–∞–Ω–Ω—ã—Ö.
            LocalDate toDate = LocalDate.now();
            LocalDate fromDate = toDate.minusDays(30);

            // –°–æ–∑–¥–∞–µ–º –º–∞–ª–µ–Ω—å–∫–∏–π –ø–æ–ª–∏–≥–æ–Ω (–∫–≤–∞–¥—Ä–∞—Ç) –≤–æ–∫—Ä—É–≥ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–∏
            double buffer = 0.0001; // –ü—Ä–∏–º–µ—Ä–Ω–æ 10-15 –º–µ—Ç—Ä–æ–≤
            String geoJsonPointAsPolygon = String.format(
                "{\"type\":\"Polygon\",\"coordinates\":[[[%f,%f],[%f,%f],[%f,%f],[%f,%f],[%f,%f]]]}",
                lon - buffer, lat - buffer, // bottom-left
                lon + buffer, lat - buffer, // bottom-right
                lon + buffer, lat + buffer, // top-right
                lon - buffer, lat + buffer, // top-left
                lon - buffer, lat - buffer  // close the polygon
            );

            Double ndviMean = sentinelHubService.getNdvIStatistics(geoJsonPointAsPolygon, fromDate, toDate);

            return ResponseEntity.ok(Map.of("ndvi", ndviMean));
            // --- –ö–û–ù–ï–¶ –†–ï–ê–õ–¨–ù–û–ì–û –ó–ê–ü–†–û–°–ê ---
            */
        } catch (Exception e) {
            System.err.println("Error fetching NDVI for coordinates " + lat + ", " + lon + ": " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(500).body(Map.of("error", "Failed to retrieve NDVI data for point: " + e.getMessage()));
        }
    }
}

// 