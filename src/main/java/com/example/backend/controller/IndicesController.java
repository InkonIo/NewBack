package com.example.backend.controller;

import java.time.LocalDate; // –ò–∑–º–µ–Ω–µ–Ω –∏–º–ø–æ—Ä—Ç –Ω–∞ PolygonArea
import java.util.Map; // –ò–∑–º–µ–Ω–µ–Ω –∏–º–ø–æ—Ä—Ç –Ω–∞ PolygonAreaService
import java.util.Optional;
import java.util.UUID;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController; // –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –¥–ª—è UUID

import com.example.backend.entiity.PolygonArea;
import com.example.backend.service.PolygonAreaService;
import com.example.backend.service.SentinelHubService;

@RestController
@RequestMapping("/api/v1/indices")
public class IndicesController {

    private final PolygonAreaService polygonAreaService; // –ò–∑–º–µ–Ω–µ–Ω–æ —Å polygonService –Ω–∞ polygonAreaService
    private final SentinelHubService sentinelHubService;

    // –û–±–Ω–æ–≤–ª–µ–Ω –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è PolygonAreaService
    public IndicesController(PolygonAreaService polygonAreaService, SentinelHubService sentinelHubService) {
        this.polygonAreaService = polygonAreaService;
        this.sentinelHubService = sentinelHubService;
    }

    @GetMapping("/ndvi/{polygonId}")
    public ResponseEntity<?> getNdvIForPolygon(@PathVariable String polygonId) {
        UUID uuid;
        try {
            uuid = UUID.fromString(polygonId); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º String ID –≤ UUID
        } catch (IllegalArgumentException e) {
            return ResponseEntity.status(400).body(Map.of("message", "Invalid polygon ID format. Must be a valid UUID."));
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º getPolygonByIdForCurrentUser –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª–∏–≥–æ–Ω–∞
        Optional<PolygonArea> optionalPolygon;
        try {
            optionalPolygon = polygonAreaService.getPolygonByIdForCurrentUser(uuid);
        } catch (SecurityException e) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –ø–æ–ª–∏–≥–æ–Ω –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            return ResponseEntity.status(403).body(Map.of("message", "Access denied. " + e.getMessage()));
        } catch (IllegalArgumentException e) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –ø–æ–ª–∏–≥–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
            return ResponseEntity.status(404).body(Map.of("message", e.getMessage()));
        }


        if (optionalPolygon.isEmpty()) {
            // –≠—Ç–æ—Ç –±–ª–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ getPolygonByIdForCurrentUser –Ω–µ –≤—ã–±—Ä–æ—Å–∏–ª –∏—Å–∫–ª—é—á–µ–Ω–∏–µ,
            // –Ω–æ –ø–æ–ª–∏–≥–æ–Ω–∞ –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ—Ç (—Ö–æ—Ç—è –ª–æ–≥–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –¥–æ–ª–∂–Ω–∞ —ç—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å).
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
            return ResponseEntity.status(404).body(Map.of("message", "Polygon not found with ID: " + polygonId));
        }

        PolygonArea polygon = optionalPolygon.get();
        String geoJsonString = polygon.getGeoJson();

        if (geoJsonString == null || geoJsonString.isEmpty()) {
            return ResponseEntity.status(400).body(Map.of("message", "Polygon GeoJSON data is missing for ID: " + polygonId));
        }

        try {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
            LocalDate toDate = LocalDate.now();
            LocalDate fromDate = toDate.minusDays(30);

            Double ndviMean = sentinelHubService.getNdvIStatistics(geoJsonString, fromDate, toDate);

            String interpretation;
            if (ndviMean == null) {
                interpretation = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ NDVI. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
            } else if (ndviMean > 0.4) { // –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è "—Ö–æ—Ä–æ—à–æ"
                interpretation = "–ù–∞ —ç—Ç–æ–º —É—á–∞—Å—Ç–∫–µ NDVI (Normalized Difference Vegetation Index) —Ä–∞–≤–µ–Ω " + String.format("%.3f", ndviMean) + ", —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ö–æ—Ä–æ—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. üåø";
            } else if (ndviMean > 0.2) {
                interpretation = "–ù–∞ —ç—Ç–æ–º —É—á–∞—Å—Ç–∫–µ NDVI (Normalized Difference Vegetation Index) —Ä–∞–≤–µ–Ω " + String.format("%.3f", ndviMean) + ", —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ–± —É–º–µ—Ä–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. üåæ";
            }
             else if (ndviMean >= 0) {
                interpretation = "–ù–∞ —ç—Ç–æ–º —É—á–∞—Å—Ç–∫–µ NDVI (Normalized Difference Vegetation Index) —Ä–∞–≤–µ–Ω " + String.format("%.3f", ndviMean) + ", —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–∫—É–¥–Ω—É—é —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –µ—ë –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ. üçÇ";
            } else {
                interpretation = "–ù–∞ —ç—Ç–æ–º —É—á–∞—Å—Ç–∫–µ NDVI (Normalized Difference Vegetation Index) —Ä–∞–≤–µ–Ω " + String.format("%.3f", ndviMean) + ", —á—Ç–æ, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤–æ–¥—É, —Å–Ω–µ–≥, –æ–±–ª–∞–∫–∞ –∏–ª–∏ –Ω–µ—Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã. üíß";
            }

            return ResponseEntity.ok(Map.of("ndviValue", ndviMean, "interpretation", interpretation));

        } catch (Exception e) {
            System.err.println("Error fetching NDVI for polygon ID " + polygonId + ": " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(500).body(Map.of("message", "Failed to retrieve NDVI data: " + e.getMessage()));
        }
    }
}
