package com.example.backend.controller;

import java.time.LocalDate;
import java.util.Collections;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap; // –ò–º–ø–æ—Ä—Ç –¥–ª—è –∫—ç—à–∞

import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.CacheControl; // –ò–º–ø–æ—Ä—Ç –¥–ª—è CacheControl
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.converter.ByteArrayHttpMessageConverter;
import org.springframework.stereotype.Service;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

import com.example.backend.entiity.PolygonArea;
import com.example.backend.service.PolygonAreaService;
import com.example.backend.service.SentinelHubService;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.util.concurrent.TimeUnit; // –ò–º–ø–æ—Ä—Ç –¥–ª—è TimeUnit

@RestController
@RequestMapping("/api/v1/indices")
public class IndicesController {

    private final PolygonAreaService polygonAreaService;
    private final SentinelHubService sentinelHubService;
    private final RestTemplate restTemplate;

    @Value("${sentinelhub.auth.url}")
    private String authUrl;

    @Value("${sentinelhub.process.url}")
    private String processUrl;

    @Value("${sentinelhub.client.id}")
    private String clientId;

    @Value("${sentinelhub.client.secret}")
    private String clientSecret;

    // ‚úÖ –ù–û–í–´–ô –í–ù–£–¢–†–ï–ù–ù–ò–ô –ö–õ–ê–°–° –î–õ–Ø –≠–õ–ï–ú–ï–ù–¢–û–í –ö–≠–®–ê
    private static class CachedTile {
        private final byte[] data;
        private final MediaType contentType;
        private final long expiryTimeMillis;

        public CachedTile(byte[] data, MediaType contentType, long expiryDurationSeconds) {
            this.data = data;
            this.contentType = contentType;
            this.expiryTimeMillis = System.currentTimeMillis() + (expiryDurationSeconds * 1000);
        }

        public byte[] getData() {
            return data;
        }

        public MediaType getContentType() {
            return contentType;
        }

        public boolean isExpired() {
            return System.currentTimeMillis() >= expiryTimeMillis;
        }
    }

    // ‚úÖ –ö–≠–® –î–õ–Ø WMS-–¢–ê–ô–õ–û–í
    private final Map<String, CachedTile> wmsTileCache = new ConcurrentHashMap<>();
    private static final long TILE_CACHE_EXPIRY_SECONDS = 300; // –ö—ç—à–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–π–ª—ã –Ω–∞ 5 –º–∏–Ω—É—Ç

    public IndicesController(PolygonAreaService polygonAreaService, SentinelHubService sentinelHubService, RestTemplate restTemplate, ObjectMapper objectMapper) {
        this.polygonAreaService = polygonAreaService;
        this.sentinelHubService = sentinelHubService;
        this.restTemplate = restTemplate;
        if (!restTemplate.getMessageConverters().stream().anyMatch(converter -> converter instanceof ByteArrayHttpMessageConverter)) {
            restTemplate.getMessageConverters().add(new ByteArrayHttpMessageConverter());
            System.out.println("ByteArrayHttpMessageConverter added to RestTemplate.");
        }
    }

    @GetMapping("/ndvi/{polygonId}")
    public ResponseEntity<?> getNdvIForPolygon(@PathVariable String polygonId) {
        UUID uuid;
        try {
            uuid = UUID.fromString(polygonId);
        } catch (IllegalArgumentException e) {
            return ResponseEntity.status(400).body(Map.of("message", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª–∏–≥–æ–Ω–∞. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π UUID."));
        }

        Optional<PolygonArea> optionalPolygon;
        try {
            optionalPolygon = polygonAreaService.getPolygonByIdForCurrentUser(uuid);
        } catch (SecurityException e) {
            return ResponseEntity.status(403).body(Map.of("message", "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. " + e.getMessage()));
        } catch (IllegalArgumentException e) {
            return ResponseEntity.status(404).body(Map.of("message", e.getMessage()));
        }

        if (optionalPolygon.isEmpty()) {
            return ResponseEntity.status(404).body(Map.of("message", "–ü–æ–ª–∏–≥–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω —Å ID: " + polygonId));
        }

        PolygonArea polygon = optionalPolygon.get();
        String geoJsonString = polygon.getGeoJson();

        if (geoJsonString == null || geoJsonString.isEmpty()) {
            return ResponseEntity.status(400).body(Map.of("message", "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ GeoJSON –¥–ª—è –ø–æ–ª–∏–≥–æ–Ω–∞ —Å ID: " + polygonId));
        }

        try {
            LocalDate toDate = LocalDate.now();
            LocalDate fromDate = toDate.minusDays(30);

            Double ndviMean = sentinelHubService.getNdvIStatistics(geoJsonString, fromDate, toDate);

            String interpretation;
            if (ndviMean == null) {
                interpretation = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ NDVI. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç —á–∏—Å—Ç—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.";
            } else if (ndviMean > 0.4) {
                interpretation = "–ù–∞ —ç—Ç–æ–º —É—á–∞—Å—Ç–∫–µ NDVI (Normalized Difference Vegetation Index) —Ä–∞–≤–µ–Ω " + String.format("%.3f", ndviMean) + ", —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ö–æ—Ä–æ—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. üåø";
            } else if (ndviMean > 0.2) {
                interpretation = "–ù–∞ —ç—Ç–æ–º —É—á–∞—Å—Ç–∫–µ NDVI (Normalized Difference Vegetation Index) —Ä–∞–≤–µ–Ω " + String.format("%.3f", ndviMean) + ", —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ–± —É–º–µ—Ä–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. üåæ";
            } else if (ndviMean >= 0) {
                interpretation = "–ù–∞ —ç—Ç–æ–º —É—á–∞—Å—Ç–∫–µ NDVI (Normalized Difference Vegetation Index) —Ä–∞–≤–µ–Ω " + String.format("%.3f", ndviMean) + ", —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Å–∫—É–¥–Ω—É—é —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –µ—ë –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ. üçÇ";
            } else {
                interpretation = "–ù–∞ —ç—Ç–æ–º —É—á–∞—Å—Ç–∫–µ NDVI (Normalized Difference Vegetation Index) —Ä–∞–≤–µ–Ω " + String.format("%.3f", ndviMean) + ", —á—Ç–æ, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤–æ–¥—É, —Å–Ω–µ–≥, –æ–±–ª–∞–∫–∞ –∏–ª–∏ –Ω–µ—Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã. üíß";
            }

            return ResponseEntity.ok(Map.of("ndviValue", ndviMean, "interpretation", interpretation));

        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è NDVI –¥–ª—è –ø–æ–ª–∏–≥–æ–Ω–∞ ID " + polygonId + ": " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(500).body(Map.of("message", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ NDVI: " + e.getMessage()));
        }
    }

    @PostMapping("/ndvi")
    public ResponseEntity<?> getNdvIForCoordinates(@RequestBody Map<String, Double> coords) {
        Double lat = coords.get("lat");
        Double lon = coords.get("lon");

        if (lat == null || lon == null) {
            return ResponseEntity.status(400).body(Map.of("error", "–¢—Ä–µ–±—É—é—Ç—Å—è —à–∏—Ä–æ—Ç–∞ –∏ –¥–æ–ª–≥–æ—Ç–∞."));
        }

        try {
            return ResponseEntity.ok(Map.of("ndvi", (Math.random() * 2 - 1)));
        } catch (Exception e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è NDVI –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç " + lat + ", " + lon + ": " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(500).body(Map.of("error", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ NDVI –¥–ª—è —Ç–æ—á–∫–∏: " + e.getMessage()));
        }
    }

    @GetMapping("/wms-proxy/{instanceId}")
    public ResponseEntity<byte[]> proxyWms(@PathVariable String instanceId, @RequestParam Map<String, String> allRequestParams) {
        if (!instanceId.equals("f15c44d0-bbb8-4c66-b94e-6a8c7ab39349")) {
            System.err.println("WMS Proxy: –ù–µ–≤–µ—Ä–Ω—ã–π instanceId: " + instanceId);
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);
        }

        String sentinelHubWmsBaseUrl = "https://services.sentinel-hub.com/ogc/wms/" + instanceId;

        StringBuilder paramsBuilder = new StringBuilder();
        allRequestParams.forEach((key, value) -> {
            paramsBuilder.append(key).append("=").append(value).append("&");
        });
        if (paramsBuilder.length() > 0) {
            paramsBuilder.deleteCharAt(paramsBuilder.length() - 1);
        }

        String fullSentinelHubUrl = sentinelHubWmsBaseUrl + "?" + paramsBuilder.toString();
        System.out.println("WMS Proxy: –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Sentinel Hub: " + fullSentinelHubUrl);

        // ‚úÖ –ü–û–ü–´–¢–ö–ê –ü–û–õ–£–ß–ò–¢–¨ –ò–ó –ö–≠–®–ê
        CachedTile cachedTile = wmsTileCache.get(fullSentinelHubUrl);
        if (cachedTile != null && !cachedTile.isExpired()) {
            System.out.println("WMS Proxy: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–∞–π–ª –∏–∑ –∫—ç—à–∞ –¥–ª—è URL: " + fullSentinelHubUrl);
            HttpHeaders cachedHeaders = new HttpHeaders();
            cachedHeaders.setContentType(cachedTile.getContentType());
            cachedHeaders.setAccessControlAllowOrigin("http://localhost:5173");
            // –î–æ–±–∞–≤–ª—è–µ–º Cache-Control –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            cachedHeaders.setCacheControl(CacheControl.maxAge(TILE_CACHE_EXPIRY_SECONDS, TimeUnit.SECONDS).cachePublic());
            return new ResponseEntity<>(cachedTile.getData(), cachedHeaders, HttpStatus.OK);
        }

        try {
            HttpHeaders headers = new HttpHeaders();
            headers.setAccept(Collections.singletonList(MediaType.IMAGE_PNG));

            HttpEntity<Void> entity = new HttpEntity<>(headers);

            ResponseEntity<byte[]> response = restTemplate.exchange(
                fullSentinelHubUrl,
                HttpMethod.GET,
                entity,
                byte[].class
            );

            System.out.println("WMS Proxy: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Sentinel Hub. –°—Ç–∞—Ç—É—Å: " + response.getStatusCode());

            if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
                // ‚úÖ –°–û–•–†–ê–ù–Ø–ï–ú –í –ö–≠–®
                CachedTile newCachedTile = new CachedTile(response.getBody(), response.getHeaders().getContentType(), TILE_CACHE_EXPIRY_SECONDS);
                wmsTileCache.put(fullSentinelHubUrl, newCachedTile);
                System.out.println("WMS Proxy: –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ç–∞–π–ª –≤ –∫—ç—à –¥–ª—è URL: " + fullSentinelHubUrl);

                HttpHeaders responseHeaders = new HttpHeaders();
                responseHeaders.setContentType(MediaType.IMAGE_PNG);
                responseHeaders.setAccessControlAllowOrigin("http://localhost:5173");
                // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú Cache-Control –î–õ–Ø –ë–†–ê–£–ó–ï–†–ù–û–ì–û –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø
                responseHeaders.setCacheControl(CacheControl.maxAge(TILE_CACHE_EXPIRY_SECONDS, TimeUnit.SECONDS).cachePublic());

                return new ResponseEntity<>(response.getBody(), responseHeaders, HttpStatus.OK);
            } else {
                String errorBody = response.getBody() != null ? new String(response.getBody()) : "No body";
                System.err.println("WMS Proxy: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞—Ç—å WMS-–∑–∞–ø—Ä–æ—Å. –°—Ç–∞—Ç—É—Å: " + response.getStatusCode() + ". –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: " + errorBody);
                return ResponseEntity.status(response.getStatusCode()).body(null);
            }

        } catch (HttpClientErrorException e) {
            System.err.println("WMS Proxy: –û—à–∏–±–∫–∞ HTTP-–∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Sentinel Hub: " + e.getStatusCode() + " - " + e.getResponseBodyAsString());
            e.printStackTrace();
            return ResponseEntity.status(e.getStatusCode()).body(e.getResponseBodyAsByteArray());
        } catch (Exception e) {
            System.err.println("WMS Proxy: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è WMS –ø—Ä–æ–∫—Å–∏-–∑–∞–ø—Ä–æ—Å–∞: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }
}